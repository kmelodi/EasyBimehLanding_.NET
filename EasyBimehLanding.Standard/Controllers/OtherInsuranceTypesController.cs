/*
 * EasyBimehLanding.Standard
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */
using System;
using System.Collections.Generic;
using System.Dynamic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Newtonsoft.Json.Converters;
using EasyBimehLanding.Standard;
using EasyBimehLanding.Standard.Utilities;
using EasyBimehLanding.Standard.Http.Request;
using EasyBimehLanding.Standard.Http.Response;
using EasyBimehLanding.Standard.Http.Client;
using EasyBimehLanding.Standard.Exceptions;

namespace EasyBimehLanding.Standard.Controllers
{
    public partial class OtherInsuranceTypesController: BaseController
    {
        #region Singleton Pattern

        //private static variables for the singleton pattern
        private static object syncObject = new object();
        private static OtherInsuranceTypesController instance = null;

        /// <summary>
        /// Singleton pattern implementation
        /// </summary>
        internal static OtherInsuranceTypesController Instance
        {
            get
            {
                lock (syncObject)
                {
                    if (null == instance)
                    {
                        instance = new OtherInsuranceTypesController();
                    }
                }
                return instance;
            }
        }

        #endregion Singleton Pattern

        /// <summary>
        /// دریافت لیست سایر بیمه نامه ها
        /// </summary>
        /// <param name="subDomain">Required parameter: دامنه یا زیر دامنه ی مرکز بیمه</param>
        /// <param name="xApiKey">Required parameter: کلید اختصاصی ارتباط با سرور</param>
        /// <return>Returns the Models.OtherInsuranceTypes response from the API call</return>
        public Models.OtherInsuranceTypes GetOtherInsuranceTypes(string subDomain, string xApiKey)
        {
            Task<Models.OtherInsuranceTypes> t = GetOtherInsuranceTypesAsync(subDomain, xApiKey);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// دریافت لیست سایر بیمه نامه ها
        /// </summary>
        /// <param name="subDomain">Required parameter: دامنه یا زیر دامنه ی مرکز بیمه</param>
        /// <param name="xApiKey">Required parameter: کلید اختصاصی ارتباط با سرور</param>
        /// <return>Returns the Models.OtherInsuranceTypes response from the API call</return>
        public async Task<Models.OtherInsuranceTypes> GetOtherInsuranceTypesAsync(string subDomain, string xApiKey)
        {
            //the base uri for api requests
            string _baseUri = Configuration.GetBaseURI();

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/ComboData/OtherInsuranceTypes");

            //process optional query parameters
            APIHelper.AppendUrlWithQueryParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "subDomain", subDomain }
            },ArrayDeserializationFormat,ParameterSeparator);


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" },
                { "x-api-key", xApiKey }
            };

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Get(_queryUrl,_headers);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<Models.OtherInsuranceTypes>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// ارسال توکن تایید شماره تماس، برای احراز هویت کاربر
        /// </summary>
        /// <param name="mobile">Required parameter: شماره موبایل</param>
        /// <param name="insuranceCentreSubDomain">Required parameter: دامنه یا زیردامنه ی مرکز بیمه</param>
        /// <param name="xApiKey">Required parameter: کلید اختصاصی ارتباط با سرور</param>
        /// <return>Returns the Models.SendSmsToken response from the API call</return>
        public Models.SendSmsToken GetSendSmsToken(string mobile, string insuranceCentreSubDomain, string xApiKey)
        {
            Task<Models.SendSmsToken> t = GetSendSmsTokenAsync(mobile, insuranceCentreSubDomain, xApiKey);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// ارسال توکن تایید شماره تماس، برای احراز هویت کاربر
        /// </summary>
        /// <param name="mobile">Required parameter: شماره موبایل</param>
        /// <param name="insuranceCentreSubDomain">Required parameter: دامنه یا زیردامنه ی مرکز بیمه</param>
        /// <param name="xApiKey">Required parameter: کلید اختصاصی ارتباط با سرور</param>
        /// <return>Returns the Models.SendSmsToken response from the API call</return>
        public async Task<Models.SendSmsToken> GetSendSmsTokenAsync(string mobile, string insuranceCentreSubDomain, string xApiKey)
        {
            //the base uri for api requests
            string _baseUri = Configuration.GetBaseURI();

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/Account/SendSmsToken");

            //process optional query parameters
            APIHelper.AppendUrlWithQueryParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "mobile", mobile },
                { "insuranceCentreSubDomain", insuranceCentreSubDomain }
            },ArrayDeserializationFormat,ParameterSeparator);


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" },
                { "x-api-key", xApiKey }
            };

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Get(_queryUrl,_headers);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<Models.SendSmsToken>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// تایید توکن پیامک شده به کاربر، برای احراز هویت
        /// </summary>
        /// <param name="mobile">Required parameter: شماره موبایل</param>
        /// <param name="token">Required parameter: توکن دریافتی کاربر از پیامک</param>
        /// <param name="insuranceCentreSubDomain">Required parameter: دامنه یا زیر دامنه ی اختصاصی مرکز بیمه</param>
        /// <param name="aliasName">Required parameter: نام و نام خانوادگی کاربر</param>
        /// <param name="resource">Required parameter: دامنه ی درخواست دهنده</param>
        /// <param name="xApiKey">Required parameter: کلید اختصاصی ارتباط با سرور</param>
        /// <return>Returns the Models.Status200 response from the API call</return>
        public Models.Status200 GetVerifySmsToken(
                string mobile,
                int token,
                string insuranceCentreSubDomain,
                string aliasName,
                string resource,
                string xApiKey)
        {
            Task<Models.Status200> t = GetVerifySmsTokenAsync(mobile, token, insuranceCentreSubDomain, aliasName, resource, xApiKey);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// تایید توکن پیامک شده به کاربر، برای احراز هویت
        /// </summary>
        /// <param name="mobile">Required parameter: شماره موبایل</param>
        /// <param name="token">Required parameter: توکن دریافتی کاربر از پیامک</param>
        /// <param name="insuranceCentreSubDomain">Required parameter: دامنه یا زیر دامنه ی اختصاصی مرکز بیمه</param>
        /// <param name="aliasName">Required parameter: نام و نام خانوادگی کاربر</param>
        /// <param name="resource">Required parameter: دامنه ی درخواست دهنده</param>
        /// <param name="xApiKey">Required parameter: کلید اختصاصی ارتباط با سرور</param>
        /// <return>Returns the Models.Status200 response from the API call</return>
        public async Task<Models.Status200> GetVerifySmsTokenAsync(
                string mobile,
                int token,
                string insuranceCentreSubDomain,
                string aliasName,
                string resource,
                string xApiKey)
        {
            //the base uri for api requests
            string _baseUri = Configuration.GetBaseURI();

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/Account/verifySmsToken");

            //process optional query parameters
            APIHelper.AppendUrlWithQueryParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "mobile", mobile },
                { "token", token },
                { "insuranceCentreSubDomain", insuranceCentreSubDomain },
                { "aliasName", aliasName },
                { "resource", resource }
            },ArrayDeserializationFormat,ParameterSeparator);


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" },
                { "x-api-key", xApiKey }
            };

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Get(_queryUrl,_headers);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);

            //Error handling using HTTP status codes
            if (_response.StatusCode == 400)
                throw new Status400Exception(@"Bad Request", _context);

            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<Models.Status200>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

    }
} 