/*
 * EasyBimehLanding.Tests
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */
using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Threading.Tasks;
using Newtonsoft.Json.Converters;
using EasyBimehLanding.Standard;
using EasyBimehLanding.Standard.Utilities; 
using EasyBimehLanding.Standard.Http.Client;
using EasyBimehLanding.Standard.Http.Response;
using EasyBimehLanding.Tests.Helpers;
using NUnit.Framework;
using EasyBimehLanding.Standard;
using EasyBimehLanding.Standard.Controllers;
using EasyBimehLanding.Standard.Exceptions;

namespace EasyBimehLanding.Tests
{
    [TestFixture]
    public class ElectronicEquipmentInsuranceControllerTest : ControllerTestBase
    {
        /// <summary>
        /// Controller instance (for all tests)
        /// </summary>
        private static ElectronicEquipmentInsuranceController controller;

        /// <summary>
        /// Setup test class
        /// </summary>
        [SetUp]
        public static void SetUpClass()
        {
            controller = GetClient().ElectronicEquipmentInsurance;
        }

        /// <summary>
        /// TODO: Add Description 
        /// </summary>
        [Test]
        public async Task TestDiviceFranchisee() 
        {
            // Parameters for the API call
            int deviceModelId = 1340;
            string xApiKey = "d6dfd932-75d8-e911-811a-000c294ecf01";

            // Perform API call
            Standard.Models.BaseModelDiviceFranchisee result = null;

            try
            {
                result = await controller.GetDiviceFranchiseeAsync(deviceModelId, xApiKey);
            }
            catch(APIException) {};

            // Test response code
            Assert.AreEqual(200, httpCallBackHandler.Response.StatusCode,
                    "Status should be 200");

            // Test headers
            Dictionary<string, string> headers = new Dictionary<string, string>();
            headers.Add("Date", null);
            headers.Add("Content-Type", null);
            headers.Add("Transfer-Encoding", null);
            headers.Add("Connection", null);
            headers.Add("Keep-Alive", null);
            headers.Add("Vary", null);
            headers.Add("Cache-Control", null);
            headers.Add("Pragma", null);
            headers.Add("Expires", null);
            headers.Add("X-StackifyID", null);
            headers.Add("X-AspNet-Version", null);
            headers.Add("X-Powered-By", null);
            headers.Add("Server", null);
            headers.Add("AR-PoweredBy", null);
            headers.Add("ar-sid", null);
            headers.Add("AR-ATIME", null);
            headers.Add("AR-CACHE", null);
            headers.Add("AR-Request-ID", null);
            headers.Add("Content-Encoding", null);

            Assert.IsTrue(TestHelper.AreHeadersProperSubsetOf (
                    headers, httpCallBackHandler.Response.Headers),
                    "Headers should match");

            // Test whether the captured response is as we expected
            Assert.IsNotNull(result, "Result should exist");

            Assert.IsTrue(TestHelper.IsJsonObjectProperSubsetOf(
                    "{\r\n  \"isSuccess\": true,\r\n  \"status\": 200,\r\n  \"message\": [\r\n    {\r\n      \"id\": 5404,\r\n      \"title\": \"30%\",\r\n      \"extraData\": null\r\n    },\r\n    {\r\n      \"id\": 5401,\r\n      \"title\": \"40%\",\r\n      \"extraData\": null\r\n    }\r\n  ],\r\n  \"extraData\": null,\r\n  \"exception\": null\r\n}", 
                    TestHelper.ConvertStreamToString(httpCallBackHandler.Response.RawBody), 
                    false, true, false),
                    "Response body should have matching keys");
        }

    }
}